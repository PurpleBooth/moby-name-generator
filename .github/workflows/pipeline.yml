name: Test
on:
  push:
  pull_request:
  workflow_dispatch:
  merge_group:
jobs:
  lint-markdown:
    uses: PurpleBooth/common-pipelines/.github/workflows/markdown-check.yml@main
  rust-checks:
    uses: PurpleBooth/common-pipelines/.github/workflows/rust-check.yml@main
  specdown:
    uses: PurpleBooth/common-pipelines/.github/workflows/specdown-check.yml@main
  docker-build:
    uses: PurpleBooth/common-pipelines/.github/workflows/docker-build.yml@main
  nfpm-build:
    runs-on: ubuntu-latest
    env:
      GOARCH: amd64
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      VER: 0.0.0
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - run: |
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt update
          sudo apt install -y nfpm gcc-aarch64-linux-gnu
      - uses: dtolnay/rust-toolchain@master
        name: Install rust toolchain
        with:
          toolchain: stable
      - shell: bash
        run: |
          function rust_to_goarch() {
              local rust_triple="$1"
              local arch
              arch=$(echo "$rust_triple" | cut -d '-' -f 1)
              local goarch=""
          
              case "$arch" in
              "x86_64") goarch="amd64" ;;
              "i686") goarch="386" ;;
              "arm") goarch="arm" ;;
              "aarch64") goarch="arm64" ;;
              # Add more mappings as needed
              *)
              echo "Unsupported architecture in Rust target triple: $arch"
              return 1
              ;;
              esac
          
              echo "$goarch"
          }
          
          function build_for() {
            ARGE="$1"
            PACKS="$2"
            rustup target add "$ARGE"
            cargo build --release --target="$ARGE"

            (
              cd "./target/$ARGE/release"
              GOARCH="$(rust_to_goarch "$ARGE")" nfpm pkg --packager archlinux --config="../../../nfpm.yaml" --target="$PACKS"
              GOARCH="$(rust_to_goarch "$ARGE")" nfpm pkg --packager rpm --config="../../../nfpm.yaml" --target="$PACKS"
              GOARCH="$(rust_to_goarch "$ARGE")" nfpm pkg --packager apk --config="../../../nfpm.yaml" --target="$PACKS"
              GOARCH="$(rust_to_goarch "$ARGE")" nfpm pkg --packager deb --config="../../../nfpm.yaml" --target="$PACKS"
            )

            cargo clean --target="$ARGE"
          }
          
          EMPD="$(mktemp -d)"
          build_for aarch64-unknown-linux-gnu "$EMPD"
          build_for x86_64-unknown-linux-gnu "$EMPD"
  release:
    if: github.ref == 'refs/heads/main'
    needs:
    - docker-build
    - specdown
    - lint-markdown
    - rust-checks
    outputs:
      current_version: ${{ steps.current_version.outputs.current_version }}
      previous_version: ${{ steps.previous_version.outputs.previous_version }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
      with:
        fetch-depth: 0
    - uses: cargo-bins/cargo-binstall@main
      name: Install cargo binstall
    - name: Get tags
      run: git fetch --tags origin
    - shell: bash
      run: cargo binstall --no-confirm cargo-edit
    - shell: bash
      run: cargo binstall --no-confirm --locked cocogitto
    - id: previous_version
      run: |
        cog get-version | tee .version
        echo "previous_version=$( cat .version )"  >> "$GITHUB_OUTPUT"
        rm .version
      shell: bash
    - name: Semver release
      id: release
      run: |
        git config --global user.name "cog-bot"
        git config --global user.email "cog@example.com"
        cog bump --auto
    - id: current_version
      run: |
        cog get-version | tee .version
        echo "current_version=$( cat .version )"  >> "$GITHUB_OUTPUT"
        rm .version
      shell: bash

  docker-push:
    if: needs.release.outputs.current_version != needs.release.outputs.previous_version
    needs:
    - release
    uses: PurpleBooth/common-pipelines/.github/workflows/docker-push.yml@main
    with:
      current_version: ${{ needs.release.outputs.current_version }}

  release-binary:
    if: needs.release.outputs.current_version != needs.release.outputs.previous_version
    needs:
    - release
    uses: PurpleBooth/common-pipelines/.github/workflows/release-rust-binary.yml@main
    with:
      current_version: ${{ needs.release.outputs.current_version }}
      previous_version: ${{ needs.release.outputs.previous_version }}
    secrets:
      cargo_token: ${{ secrets.CARGO_TOKEN }}
      committer_token: ${{ secrets.COMMITTER_TOKEN }}
      gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}

  release-packs:
    permissions:
      id-token: write
      attestations: write
      contents: write
    runs-on: ubuntu-latest
    if: needs.release.outputs.current_version != needs.release.outputs.previous_version
    needs:
      - release
      - release-binary
    env:
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      VER: ${{ needs.release.outputs.current_version }}
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - run: echo "result=$(test -f nfpm.yaml && echo "" || echo "skip")" >> "$GITHUB_OUTPUT"
        id: should_skip
      - run: |
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt update
          sudo apt install -y nfpm gcc-aarch64-linux-gnu
        if: steps.should_skip.outputs.result != 'skip'
      - uses: dtolnay/rust-toolchain@master
        if: steps.should_skip.outputs.result != 'skip'
        name: Install rust toolchain
        with:
          toolchain: stable
      - shell: bash
        if: steps.should_skip.outputs.result != 'skip'
        run: |
          function rust_to_goarch() {
              local rust_triple="$1"
              local arch
              arch=$(echo "$rust_triple" | cut -d '-' -f 1)
              local goarch=""
          
              case "$arch" in
              "x86_64") goarch="amd64" ;;
              "i686") goarch="386" ;;
              "arm") goarch="arm" ;;
              "aarch64") goarch="arm64" ;;
              # Add more mappings as needed
              *)
              echo "Unsupported architecture in Rust target triple: $arch"
              return 1
              ;;
              esac
          
              echo "$goarch"
          }
          
          function build_for() {
            ARGE="$1"
            PACKS="$2"
            rustup target add "$ARGE"
            cargo build --release --target="$ARGE"

            (
              cd "./target/$ARGE/release"
              GOARCH="$(rust_to_goarch "$ARGE")" nfpm pkg --packager archlinux --config="../../../nfpm.yaml" --target="$PACKS"
              GOARCH="$(rust_to_goarch "$ARGE")" nfpm pkg --packager rpm --config="../../../nfpm.yaml" --target="$PACKS"
              GOARCH="$(rust_to_goarch "$ARGE")" nfpm pkg --packager apk --config="../../../nfpm.yaml" --target="$PACKS"
              GOARCH="$(rust_to_goarch "$ARGE")" nfpm pkg --packager deb --config="../../../nfpm.yaml" --target="$PACKS"
            )
          }

          EMPD="$PWD/packs"
          mkdir -p "$PWD/packs"
          build_for aarch64-unknown-linux-gnu "$EMPD"
          build_for x86_64-unknown-linux-gnu "$EMPD"
      - name: Attest binaries
        if: steps.should_skip.outputs.result != 'skip'
        uses: actions/attest-build-provenance@6149ea5740be74af77f260b9db67e633f6b0a9a1 # v1
        with:
          subject-path: packs/**/*
      - name: Add hashes to release
        if: steps.should_skip.outputs.result != 'skip'
        run: |
          {
            (
             cd packs
             for file in *; do
               if [[ -f "$file" ]]; then
                 echo " * $(sha256sum "$file")"
               fi
             done
            )
          } >> SHAs.md
      - name: Release
        if: steps.should_skip.outputs.result != 'skip'
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2
        with:
          files: packs/**/*
          tag_name: v${{ needs.release.outputs.current_version }}
          append_body: true
          body_path: SHAs.md
