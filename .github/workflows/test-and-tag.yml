on:
  push:
    branches:
    - '*'
  pull_request:
jobs:
  version:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0
    - uses: chaaz/versio-actions/install@v1.2
      name: Install versio
    - name: Check projects
      run: versio check
    - name: Print changes
      run: versio plan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_USER: ${{ github.actor }}
  test-windows:
    strategy:
      matrix:
        go-version: [1.13.x, 1.14.x]
        os: [windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2.3.4
    - uses: actions/cache@v2.1.6
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - uses: actions/setup-go@v2.1.4
      with:
        go-version: ${{ matrix.go-version }}
    - run: make test-universal
  test:
    strategy:
      matrix:
        go-version: [1.13.x, 1.14.x]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2.3.4
    - uses: actions/cache@v2.1.6
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - uses: actions/setup-go@v2.1.4
      with:
        go-version: ${{ matrix.go-version }}
    - run: make test
  merge-and-push:
    if: github.ref == 'refs/heads/main'
    needs:
    - test-windows
    - test
    - version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        token: ${{ secrets.COMMITTER_TOKEN }}
        fetch-depth: 0
    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v3.2.0
      with:
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}
        git-user-signingkey: true
        git-commit-gpgsign: true
        git-tag-gpgsign: true
    - uses: chaaz/versio-actions/install@v1.2
      name: Install versio
    - run: echo ::set-output "name=BUMP::$( versio release --dry-run )"
      id: get_versio_plan
      env:
        GITHUB_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
        GITHUB_USER: ${{ github.actor }}
    - name: Generate release
      if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
      run: versio release
      env:
        GITHUB_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
        GITHUB_USER: ${{ github.actor }}
